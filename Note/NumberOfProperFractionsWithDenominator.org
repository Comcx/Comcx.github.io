#+Title:  Number of Proper Fractions with Denominator d
#+AUTHOR: Comcx
#+DATE:   <2020-02-23 周日>


#+SETUPFILE: org-themes/setup/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>


** The story begins ...

Today I'm working on solving the problem *Number of Proper Fractions with Denominator d* in
[[https://www.codewars.com/kata/55b7bb74a0256d4467000070/][Codewars]].

*** The brief description
If n is the numerator and d the denominator of a fraction, 
that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.

For example 5/16 is a proper fraction, while 6/16 is not, 
as both 6 and 16 are divisible by 2, thus the fraction can be reduced to 3/8.

Now, if you consider a given number d, how many proper fractions can be built using d as a denominator?

For example, let's assume that d is 15: 
you can build a total of 8 different proper fractions between 0 and 1 with it: 
=1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15=.

You are to build a function that computes how many proper fractions you can build with a given denominator:
#+BEGIN_SRC scala
proper_fractions(1)  == 0
proper_fractions(2)  == 1
proper_fractions(5)  == 4
proper_fractions(15) == 8
proper_fractions(25) == 20
#+END_SRC
Be ready to handle big numbers.

** Brute force

Since I'm not smart enough, I simply use brute force in the first place:
#+BEGIN_SRC scala
object Sol {

  def gcd(a: Long, b: Long): Long = if(b == 0) a else gcd(b, a % b)
  def properFractions(n: Long): Long = {
    if(n == 1) return 0
    var ans = 0
    for(i <- 1L to n) if(gcd(i, n) == 1) ans += 1
    ans
  }
}
#+END_SRC
But got: =Execution Timed Out (12000 ms)=.

** Euler's totient function
I tried to filter with =isPrime= function but failed again, I was not happy until I find
_Euler's totient function_.

In number theory, Euler's totient function counts the positive integers 
up to a given integer n that are relatively prime to n.(relatively prime or coprime simply means gcd(a, b) == 1).
Let's try to discover Euler's function by ourselves!

*** The puzzle
Let's set up our goal:
#+BEGIN_SRC 
Find a function f, such that
f n = number of factors i if(gcd(i, n) == 1)
#+END_SRC
Well, firstly, we want to find some simple cases where f can be calculated easily.
Notice that if n is a prime number, then all we need to do is just to subtract 1 from n:

- Theorm 0:
  #+BEGIN_SRC haskell
  f n | isPrime(n) = n - 1
  #+END_SRC
Great! We've found something to guide our way!

If we have some background knowledge of /Category theory/, we would try to find a
*functor* F, such that =F(ab) equals F(a)F(b)=.
What if our function f is a functor?

- Theorm 1:
  #+BEGIN_SRC 
  If a and b are coprime(gcd(a, b) == 1), then
  f(ab) = f(a)f(b)
  #+END_SRC
  This is already the pattern of =divide and conquer= method!

- Theorm 2:
  #+BEGIN_SRC 
  If n = ab where a and b are prime numbers, then
  f(n) 
    = f(a)f(b)        -- from theorm 1
    = (a - 1)(b - 1)  -- from theorm 0
  #+END_SRC

Now everything is clear, the whole problem has been divided as a prime factor problem.
Just factor number n and multiply them with substraction.

- Conclusion
#+BEGIN_SRC 
if n = a^pa * b^pb * ... * x^px
f(n) = n * (1 - 1 / a) * (1 - 1 / b) * ... * (1 - 1 / x)
#+END_SRC

*** Implementation

Written in imperative /Scala/:
#+BEGIN_SRC scala
object Sol {

  def properFractions(n: Long): Long = {
    if(n == 1) return 0
    var res = n
    var a = n
    for (i <- 2L to math.sqrt(a).toLong) {
      if (a % i == 0) {
        res = res / i * (i-1)
        while(a % i == 0) a /= i
      }
    }
    if(a > 1) res = res / a * (a-1)
    res
  }
}
#+END_SRC
The time complexity is =O(sqrt(n))=.

Functional version:
#+BEGIN_SRC scala
UNDERWORK
#+END_SRC




