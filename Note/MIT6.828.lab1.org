#+Title:  MIT6.828 Lab 1
#+Author: Comcx


#+SETUPFILE: theme-readtheorg-local.setup

:Prelog:
I want to review MIT6.828 labs and homework...
This is still essential for me to make a better pl someday :)

- Reference
[[https://pdos.csail.mit.edu/6.828/2018/labs/lab1/][MIT6.828 2018 Lab 1]]
:end:

** Software and Environment Setup
The origin course uses _athena_ and a patched _qemu_ .
I do not want to install a new virtual OS or have a new computer or
ruin my current computer.
Therefore, I decide to use _docker_ and make a virtual environment which is
effcient and light-weight.

The process is a little tough though...

*** Pull ubuntu from docker-hub and make a dockerfile
#+BEGIN_SRC shell
$ docker pull ubuntu:18.04
#+END_SRC

- Dockerfile
#+BEGIN_SRC 
FROM ubuntu:18.04

RUN apt-get update \
    && apt-get install -y \
    sudo \
    git \
    g++ \
    emacs \
    make \
    gcc-multilib \
    && useradd --create-home --no-log-init --shell /bin/bash comcx \
    && adduser comcx sudo \
    && echo 'comcx:mimawei0' | chpasswd

USER comcx
WORKDIR /home/comcx

#+END_SRC

- Build
#+BEGIN_SRC 
$ docker build -t oslab .
#+END_SRC
Now we have a very small environment prototype which will be fixed into our experiment space later:)

Run the following command into the container!
#+BEGIN_SRC 
$ docker run -it oslab bash
#+END_SRC

*** Install patched QEMU
We need to firstly pull the patched qemu following reference page.
[[https://pdos.csail.mit.edu/6.828/2018/tools.html][Tool page]]
#+BEGIN_SRC shell
$ git clone https://github.com/mit-pdos/6.828-qemu.git qemu
$ cd qemu
$ ./configure --disable-kvm --disable-werror --disable-sdl [--prefix=PFX] [--target-list="i386-softmmu x86_64-softmmu"]
$ make && make install
#+END_SRC

**** Pitfalls
- Executing "./configure --disable-kvm ..." 
  + ERROR: Python not found. Use --python=/path/to/python
  + To fix: install python2.7, and add --python=python2.7

  + ERROR: pkg-config binary 'pkg-config' not found
  + apt-get install -y pkg-config

  + ERROR: zlib check failed. Make sure to have the zlib libs and headers installed.
  + sudo apt-get install zlib1g-dev

  + ERROR: glib-2.12 gthread-2.0 is required to compile QEMU
  + sudo apt-get install libglib2.0-dev

Finally, we are done.

*** Pull JOS repository
#+BEGIN_SRC shell
$ git clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab
#+END_SRC

Inside lab/, try =make qemu= ,if the program runs, then our basic experiment space is now ready.
#+BEGIN_SRC 
$ docker commit <container> mit6.828
#+END_SRC

** Part 1: PC Bootstrap
*** Exercise 1
  #+BEGIN_QUOTE
  Familiarize yourself with the assembly language materials available on the 6.828 reference page. 
  You don't have to read them now, but you'll almost certainly want to refer to some of this material when reading and writing x86 assembly.

  We do recommend reading the section "The Syntax" in Brennan's Guide to Inline Assembly. 
  It gives a good (and quite brief) description of the AT&T assembly syntax we'll be using with the GNU assembler in JOS.
  #+END_QUOTE

  [[http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html][Brennan's Guide to Inline Assembly]] is nice for both intel and AT&T syntax(I prefer intel).
  The _PCASM book_ helps me a lot!

  Finally, I am comfortable with most of assembly programs, but still lack experience and have some problems at use of
  =in= and =out= commands...

*** The PC's Physical Address Space
#+BEGIN_SRC 
+------------------+  <- 0xFFFFFFFF (4GB)
|      32-bit      |
|  memory mapped   |
|     devices      |
|                  |
/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\
|                  |
|      Unused      |
|                  |
+------------------+  <- depends on amount of RAM
|                  |
|                  |
| Extended Memory  |
|                  |
|                  |
+------------------+  <- 0x00100000 (1MB)
|     BIOS ROM     |
+------------------+  <- 0x000F0000 (960KB)
|  16-bit devices, |
|  expansion ROMs  |
+------------------+  <- 0x000C0000 (768KB)
|   VGA Display    |
+------------------+  <- 0x000A0000 (640KB)
|                  |
|    Low Memory    |
|                  |
+------------------+  <- 0x00000000
#+END_SRC
This general picture of memory is important.

The layout exposes design compromise due to back compatibility.
To allow old PCs of 16bits, we still maintain the layout of 0x0 ~ 0x100000(old 8086 has 1MB space)

The BIOS ROM is first loaded into memory and then be executed when a computer powers on.
Let's inspect how BIOS is loaded and executed and eventually die out...

Simulate our qemu!
The following line:
#+BEGIN_SRC 
[f000:fff0] 0xffff0:	ljmp   $0xf000,$0xe05b
#+END_SRC
is GDB's disassembly of the first instruction to be executed. From this output you can conclude a few things:

- The IBM PC starts executing at physical address 0x000ffff0, which is at the very top of the 64KB area reserved for the ROM BIOS.
- The PC starts executing with CS = 0xf000 and IP = 0xfff0.
- The first instruction to be executed is a jmp instruction, which jumps to the segmented address CS = 0xf000 and IP = 0xe05b.

Well this looks weird, why at 0xffff0? why have to first execute at 0xffff0 and immediately jump to 0xfe05b?
Firstly, the BIOS in a PC is "hard-wired" to the physical address range 0x000f0000-0x000fffff, 
this design ensures that the BIOS always gets control of the machine first after power-up or any system restart.
Second, on processor reset, the (simulated) processor enters real mode and sets CS to 0xf000 and the IP to 0xfff0, 
so that execution begins at that (CS:IP) segment address.

*** Exercise 2
#+BEGIN_QUOTE
Use GDB's si (Step Instruction) command to trace into the ROM BIOS for a few more instructions, 
and try to guess what it might be doing. 

You might want to look at Phil Storrs I/O Ports Description, 
as well as other materials on the 6.828 reference materials page. 
No need to figure out all the details - just the general idea of what the BIOS is doing first.
#+END_QUOTE
OK, just the general idea:)

#+BEGIN_SRC 
The target architecture is assumed to be i8086
[f000:fff0]    0xffff0:	ljmp   $0xf000,$0xe05b
0x0000fff0 in ?? ()
+ symbol-file obj/kern/kernel
(gdb) si
[f000:e05b]    0xfe05b:	cmpl   $0x0,%cs:0x6ac8
0x0000e05b in ?? ()
(gdb) si
[f000:e062]    0xfe062:	jne    0xfd2e1
0x0000e062 in ?? ()
(gdb) si
[f000:e066]    0xfe066:	xor    %dx,%dx
0x0000e066 in ?? ()
(gdb) si
[f000:e068]    0xfe068:	mov    %dx,%ss
0x0000e068 in ?? ()
(gdb) 
...
#+END_SRC
When the BIOS runs, it sets up an interrupt descriptor table and initializes various devices such as the VGA display. 
This is where the "Starting SeaBIOS" message you see in the QEMU window comes from.

** Part 2: The Boot Loader
*** Exercise 3
#+BEGIN_QUOTE
Take a look at the lab tools guide, especially the section on GDB commands. 
Even if you're familiar with GDB, this includes some esoteric GDB commands that are useful for OS work.

Set a breakpoint at address 0x7c00, which is where the boot sector will be loaded. 
Continue execution until that breakpoint. Trace through the code in boot/boot.S, 
using the source code and the disassembly file obj/boot/boot.asm to keep track of where you are. 
Also use the x/i command in GDB to disassemble sequences of instructions in the boot loader, 
and compare the original boot loader source code with both the disassembly in obj/boot/boot.asm and GDB.

Trace into bootmain() in boot/main.c, and then into readsect(). 
Identify the exact assembly instructions that correspond to each of the statements in readsect(). 
Trace through the rest of readsect() and back out into bootmain(), 
and identify the begin and end of the for loop that reads the remaining sectors of the kernel from the disk. 
Find out what code will run when the loop is finished, set a breakpoint there, and continue to that breakpoint. 
Then step through the remainder of the boot loader.
#+END_QUOTE

**** GDB useful instructions
| Ctrl-c           | Halt the machine                                                                                  |
| continue         | Continue execution until the next breakpoint or Ctrl-c                                            |
| c                | same as continue                                                                                  |
| stepi            | Execute one machine instruction                                                                   |
| si               | same as stepi                                                                                     |
| b function       | Set a breakpoint at the given function or line                                                    |
| b file:line      | same as above                                                                                     |
| breakpoint       | as above                                                                                          |
| b *addr          | Set a breakpoint at the EIP addr                                                                  |
| set print pretty | Enable pretty-printing of arrays and structs                                                      |
| info registers   | Print the general purpose registers, eip, eflags, and the segment selectors                       |
| x/Nx addr        | Display a hex dump of N words starting at virtual address addr. If N is omitted, it defaults to 1 |
| x/Ni addr        | Display the N assembly instructions starting at addr                                              |
| symbol-file file | Switch to symbol file file                                                                        |
| thread n         | focus to thread n                                                                                 |
| info threads     | List all threads                                                                                  |

Mostly, we will only use =c= and =b= and =x/N= .

**** Trace 0x7C00
#+BEGIN_SRC 
(gdb) b *0x7C00
Breakpoint 1 at 0x7c00
(gdb) c
Continuing.
[   0:7c00] => 0x7c00:	cli    

Breakpoint 1, 0x00007c00 in ?? ()
(gdb) x/i 0x7c00
=> 0x7c00:	cli    
(gdb) (gdb) x/21i 0x7c00
=> 0x7c00:	cli    
   0x7c01:	cld    
   0x7c02:	xor    %ax,%ax
   0x7c04:	mov    %ax,%ds
   0x7c06:	mov    %ax,%es
   0x7c08:	mov    %ax,%ss
   0x7c0a:	in     $0x64,%al
   0x7c0c:	test   $0x2,%al
   0x7c0e:	jne    0x7c0a
   0x7c10:	mov    $0xd1,%al
   0x7c12:	out    %al,$0x64
   0x7c14:	in     $0x64,%al
   0x7c16:	test   $0x2,%al
   0x7c18:	jne    0x7c14
   0x7c1a:	mov    $0xdf,%al
   0x7c1c:	out    %al,$0x60
   0x7c1e:	lgdtw  0x7c64
   0x7c23:	mov    %cr0,%eax
   0x7c26:	or     $0x1,%eax
   0x7c2a:	mov    %eax,%cr0
   0x7c2d:	ljmp   $0x8,$0x7c32
...
#+END_SRC
The first few lines from 0x7c00 is just the same as code in /boot.S/ .
There are some codes need to focus on.
1. =ljmp $0x8,$0x7c32=
   The original assembly code is =ljmp    $PROT_MODE_CSEG, $protcseg= where
   =.set PROT_MODE_CSEG, 0x8         # kernel code segment selector=. 
   The GDT code is:
   #+BEGIN_SRC 
   gdt:
     SEG_NULL                              # null seg
     SEG(STA_X|STA_R, 0x0, 0xffffffff)     # code seg
     SEG(STA_W, 0x0, 0xffffffff)           # data seg
   #+END_SRC
   Here we can see that the logical addr =0x8= is mapped to =0x0=.
   Therefore although we have GDT, the following code we're using is still mapped
   directly to %eip.

2. Let's focus on bootmain next... 
   #+BEGIN_SRC 
   (gdb) x/5i 0x7c40
      0x7c40:	mov    $0x7c00,%sp
      0x7c43:	add    %al,(%bx,%si)
      0x7c45:	call   0x7d13
      0x7c48:	add    %al,(%bx,%si)
      0x7c4a:	jmp    0x7c4a
   #+END_SRC
   The origin is
   #+BEGIN_SRC 
   # Set up the stack pointer and call into C.
    movl    $start, %esp
    call bootmain

   # If bootmain returns (it shouldn't), loop.
  spin:
    jmp spin
   #+END_SRC
   Since we are in assembly, we need to set %esp by hand to =0x7c00(function call conventions)=.
   =bootmain= is at =0x7d13=.
   - What does =add    %al,(%bx,%si)= do here?

     it could be a bunch of data that the de-compiler is having trouble with...
     more likely, its just the header or footer information that comes with every executable...

**** Trace bootmain and readect
- bootmain code
#+BEGIN_SRC c
void
bootmain(void)
{
        struct Proghdr *ph, *eph;

	// read 1st page off disk                                               
        readseg((uint32_t) ELFHDR, SECTSIZE*8, 0);

        // is this a valid ELF?                                                 
	if (ELFHDR->e_magic != ELF_MAGIC)
                goto bad;

        // load each program segment (ignores ph flags)                         
        ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
        eph = ph + ELFHDR->e_phnum;
        for (; ph < eph; ph++)
                // p_pa is the load address of this segment (as well            
                // as the physical address)                                     
                readseg(ph->p_pa, ph->p_memsz, ph->p_offset);

        // call the entry point from the ELF header                             
        // note: does not return!                                               
        ((void (*)(void)) (ELFHDR->e_entry))();

bad:
        outw(0x8A00, 0x8A00);
        outw(0x8A00, 0x8E00);
	while (1)
                /* do nothing */;
}

#+END_SRC
Later we will figure out where the kernel will be loaded.
#+BEGIN_SRC 
(gdb) x/10i 0x7d15
=> 0x7d15:	push   %ebp
   0x7d16:	mov    %esp,%ebp
   0x7d18:	push   %esi
   0x7d19:	push   %ebx
   0x7d1a:	push   $0x0
   0x7d1c:	push   $0x1000
   0x7d21:	push   $0x10000
   0x7d26:	call   0x7cdc
   0x7d2b:	add    $0xc,%esp
   0x7d2e:	cmpl   $0x464c457f,0x10000
...
#+END_SRC
The for loop checks eph range each loop.

**** Questions
- At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?

  At the point after =ljmp    $PROT_MODE_CSEG, $protcseg=.
  Change %cr0 exactly causes the switch.


- What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?

  Last instruction(if no fault): =((void (*)(void)) (ELFHDR->e_entry))();=.
  First instruction of kernel: =movw $0x1234,0x472=.

- Where is the first instruction of the kernel?

  as above

- How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? 
  Where does it find this information?

  from the variable =ELFHDR->e_phoff=.

*** Loading the kernel
**** Exercise 5
#+BEGIN_QUOTE
Exercise 4. Read about programming with pointers in C. 
The best reference for the C language is The C Programming Language by Brian Kernighan and Dennis Ritchie (known as 'K&R'). 
We recommend that students purchase this book (here is an Amazon Link) or find one of MIT's 7 copies.

Read 5.1 (Pointers and Addresses) through 5.5 (Character Pointers and Functions) in K&R. 
Then download the code for pointers.c, run it, and make sure you understand where all of the printed values come from. 
In particular, make sure you understand where the pointer addresses in printed lines 1 and 6 come from, 
how all the values in printed lines 2 through 4 get there, and why the values printed in line 5 are seemingly corrupted.

There are other references on pointers in C (e.g., A tutorial by Ted Jensen that cites K&R heavily), though not as strongly recommended.

Warning: Unless you are already thoroughly versed in C, do not skip or even skim this reading exercise. 
If you do not really understand pointers in C, you will suffer untold pain and misery in subsequent labs, 
and then eventually come to understand them the hard way. Trust us; you don't want to find out what "the hard way" is.
#+END_QUOTE
The hard way...emmmmm seems intereting (

I think I am already familiar with C pointers, but, just in case, Let's check knowledge by this exercise.

Code of /pointers.c/.
#+BEGIN_SRC c
#include <stdio.h>
#include <stdlib.h>

void
f(void)
{
    int a[4];
    int *b = malloc(16);
    int *c;
    int i;

    printf("1: a = %p, b = %p, c = %p\n", a, b, c);

    c = a;
    for (i = 0; i < 4; i++)
	a[i] = 100 + i;
    c[0] = 200;
    printf("2: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n",
	   a[0], a[1], a[2], a[3]);

    c[1] = 300;
    *(c + 2) = 301;
    3[c] = 302;
    printf("3: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n",
	   a[0], a[1], a[2], a[3]);

    c = c + 1;
    *c = 400;
    printf("4: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n",
	   a[0], a[1], a[2], a[3]);

    c = (int *) ((char *) c + 1);
    *c = 500;
    printf("5: a[0] = %d, a[1] = %d, a[2] = %d, a[3] = %d\n",
	   a[0], a[1], a[2], a[3]);

    b = (int *) a + 1;
    c = (int *) ((char *) a + 1);
    printf("6: a = %p, b = %p, c = %p\n", a, b, c);
}

int
main(int ac, char **av)
{
    f();
    return 0;
}

#+END_SRC
Result:
#+BEGIN_SRC 
1: a = 0x7ffeeb8b9970, b = 0x7fcb43405800, c = 0x7ffeeb8b99d8
2: a[0] = 200, a[1] = 101, a[2] = 102, a[3] = 103
3: a[0] = 200, a[1] = 300, a[2] = 301, a[3] = 302
4: a[0] = 200, a[1] = 400, a[2] = 301, a[3] = 302
5: a[0] = 200, a[1] = 128144, a[2] = 256, a[3] = 302
6: a = 0x7ffeeb8b9970, b = 0x7ffeeb8b9974, c = 0x7ffeeb8b9971
#+END_SRC
Well I'm done, how about u?

**** ELF format
- *.text*: The program's executable instructions.
- *.rodata*: Read-only data, such as ASCII string constants produced by the C compiler.
- *.data*: The data section holds the program's initialized data, such as global variables declared with initializers like int x = 5;.
- *.bss*: "uninitialized" global variables start with a value of zero

Let's try this command:
#+BEGIN_SRC 
$ objdump -h obj/kern/kernel
#+END_SRC
#+BEGIN_SRC 
obj/kern/kernel:     file format elf32-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019e9  f0100000  00100000  00001000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000006c0  f0101a00  00101a00  00002a00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .stab         00003b95  f01020c0  001020c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stabstr      00001948  f0105c55  00105c55  00006c55  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00009300  f0108000  00108000  00009000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  5 .got          00000008  f0111300  00111300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .got.plt      0000000c  f0111308  00111308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data.rel.local 00001000  f0112000  00112000  00013000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data.rel.ro.local 00000044  f0113000  00113000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  f0113060  00113060  00014060  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .comment      00000029  00000000  00000000  000146a8  2**0
                  CONTENTS, READONLY
#+END_SRC
Several things to notice:
1) "VMA" (or link address) and the "LMA" (or load address) of the .text section.
   VMA and LMA often the same, why not here(we will rediscuss this in the part 3).

well, just a general concept here, I shall study in-depth when I review compiler theories again.

**** Exercise 5
#+BEGIN_QUOTE
Trace through the first few instructions of the boot loader again and identify the first instruction that 
would "break" or otherwise do the wrong thing if you were to get the boot loader's link address wrong. 
Then change the link address in boot/Makefrag to something wrong, run make clean, recompile the lab with make, 
and trace into the boot loader again to see what happens. Don't forget to change the link address back and make clean again afterward!
#+END_QUOTE

** Part 3: The Kernel
Kernel! Things going to become interesting!
Let's first try to figure out one remained question on _ELF format_ above:
#+BEGIN_QUOTE
Why VMA is different from LMA?
#+END_QUOTE
#+BEGIN_QUOTE
Operating system kernels often like to be linked and run at very high virtual address, such as 0xf0100000, 
in order to leave the lower part of the processor's virtual address space for user programs to use. 
The reason for this arrangement will become clearer in the next lab.
#+END_QUOTE
In fact, OS map virtual address 0xf0100000 (the link address at which the kernel code expects to run) 
to physical address 0x00100000 (where the boot loader loaded the kernel into physical memory).
Well, it seems we still have more work to do:)

*** Exercise 7
#+BEGIN_QUOTE
Use QEMU and GDB to trace into the JOS kernel and stop at the movl %eax, %cr0. 
Examine memory at 0x00100000 and at 0xf0100000. 
Now, single step over that instruction using the stepi GDB command. 
Again, examine memory at 0x00100000 and at 0xf0100000. Make sure you understand what just happened.

What is the first instruction after the new mapping is established that would fail to work properly if the mapping weren't in place? 
Comment out the movl %eax, %cr0 in kern/entry.S, trace into it, and see if you were right.
#+END_QUOTE
#+BEGIN_SRC
(gdb) b *0x10000c
Breakpoint 1 at 0x10000c
(gdb) c
Continuing.
The target architecture is assumed to be i386
=> 0x10000c:	movw   $0x1234,0x472

Breakpoint 1, 0x0010000c in ?? ()
(gdb) x/4i 0x00100000
   0x100000:	add    0x1bad(%eax),%dh
   0x100006:	add    %al,(%eax)
   0x100008:	decb   0x52(%edi)
   0x10000b:	in     $0x66,%al
(gdb) x/4i 0xf0100000
   0xf0100000 <_start+4026531828>:	add    %al,(%eax)
   0xf0100002 <_start+4026531830>:	add    %al,(%eax)
   0xf0100004 <_start+4026531832>:	add    %al,(%eax)
   0xf0100006 <_start+4026531834>:	add    %al,(%eax)
#+END_SRC

After several =si=...
#+BEGIN_SRC
(gdb) si
=> 0x100028:	mov    $0xf010002f,%eax
0x00100028 in ?? ()
(gdb) x/4i 0x00100000
   0x100000:	add    0x1bad(%eax),%dh
   0x100006:	add    %al,(%eax)
   0x100008:	decb   0x52(%edi)
   0x10000b:	in     $0x66,%al
(gdb) x/4i 0xf0100000
   0xf0100000 <_start+4026531828>:	add    0x1bad(%eax),%dh
   0xf0100006 <_start+4026531834>:	add    %al,(%eax)
   0xf0100008 <_start+4026531836>:	decb   0x52(%edi)
   0xf010000b <_start+4026531839>:	in     $0x66,%al
#+END_SRC
Address mapping done.

*** Formatted Printing to the Console
**** Exercise 8
#+BEGIN_QUOTE
We have omitted a small fragment of code - the code necessary to print octal numbers using patterns of the form "%o". 
Find and fill in this code fragment.
#+END_QUOTE
Well, it's easy to complete the code, but it's still alittle hard for me to understand every line here.

- =kern/printf.c= rely on =lib/printfmt.c= and =kern/console.c= .
- =lib/printfmt.c= rely on =kern/console.c= .

The most important part is here:
#+BEGIN_SRC c
// output a character to the console
static void
cons_putc(int c)
{
    serial_putc(c);
    lpt_putc(c);
    cga_putc(c);
}
#+END_SRC

Let's firstly finish the code and try to analyse more codes...
#+BEGIN_SRC c
case 'o':
    num = getuint(&ap, lflag);
    base = 8;
    goto number;
#+END_SRC

**** Explain the following code from =kern/console.c= .
#+BEGIN_SRC c
if (crt_pos >= CRT_SIZE) {
    int i;
    memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
    for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
        crt_buf[i] = 0x0700 | ' ';
        crt_pos -= CRT_COLS;
}
#+END_SRC

*** The Stack
 Exploring in more detail the way the C language uses the stack on the x86.

**** Exercise 9
 #+BEGIN_QUOTE
 Determine where the kernel initializes its stack, and exactly where in memory its stack is located. 
 How does the kernel reserve space for its stack? And at which "end" of this reserved area is the stack pointer initialized to point to?
 #+END_QUOTE

 I noticed codes in =kern/entry.S= :
 #+BEGIN_SRC 
.data
###################################################################
# boot stack
###################################################################
        .p2align        PGSHIFT         # force page alignment
        .globl          bootstack
bootstack:
        .space          KSTKSIZE
	.globl          bootstacktop
bootstacktop:
 #+END_SRC

 and settings here:
 #+BEGIN_SRC 
 # Clear the frame pointer register (EBP)
 # so that once we get into debugging C code,
 # stack backtraces will be terminated properly.
 movl    $0x0,%ebp                       # nuke frame pointer

 # Set the stack pointer
 movl    $(bootstacktop),%esp
 #+END_SRC

 Moreover, in =inc/memlayout.h= :
 #+BEGIN_SRC c
// Kernel stack.
#define KSTACKTOP    KERNBASE
#define KSTKSIZE    (8*PGSIZE)           // size of a kernel stack
#define KSTKGAP        (8*PGSIZE)           // size of a kernel stack guard
 #+END_SRC

 =PGSIZE= is defined in =inc/mmu.h= , which is =4096= .
 Thus =KSTKSIZE = 32KB= .

 Before jump into exercise 10, I want to draw an overview of current memory layout.
 #+BEGIN_SRC 
+------------------+  <- 0xFFFFFFFF (4GB)
|      32-bit      |
|  memory mapped   |
|     devices      |
|                  |
/\/\/\/\/\/\/\/\/\/\

/\/\/\/\/\/\/\/\/\/\
|                  |
|      Unused      |
|                  |
+------------------+  <- depends on amount of RAM
|                  |
|------------------|  <- 0x00110000 (Stack top)
|   Kernel stack   |
|------------------|  <- 0x0010fc00 (end of stack)
|   Kernel codes   |
+------------------+  <- 0x00100000 (1MB)
|     BIOS ROM     |
+------------------+  <- 0x000F0000 (960KB)
|  16-bit devices, |
|  expansion ROMs  |
+------------------+  <- 0x000C0000 (768KB)
|   VGA Display    |
+------------------+  <- 0x000A0000 (640KB)
|                  |
|    Low Memory    |
|                  |
+------------------+  <- 0x00000000
 #+END_SRC

**** Exercise 10
 #+BEGIN_QUOTE
 To become familiar with the C calling conventions on the x86, 
 find the address of the test_backtrace function in obj/kern/kernel.asm, 
 set a breakpoint there, and examine what happens each time it gets called after the kernel starts. 
 How many 32-bit words does each recursive nesting level of test_backtrace push on the stack, and what are those words?

 Note that, for this exercise to work properly, 
 you should be using the patched version of QEMU available on the tools page or on Athena. 
 Otherwise, you'll have to manually translate all breakpoint and memory addresses to linear addresses.
 #+END_QUOTE

 - Function =test_backtrace= in =obj/kern/kernel.asm= :
 #+BEGIN_SRC
f0100040 <test_backtrace>:
 #+END_SRC
 The C codes of =test_backtrace= is in =kern/init.c= :
 #+BEGIN_SRC c
// Test the stack backtrace function (lab 1 only)                               
void
test_backtrace(int x)
{
        cprintf("entering test_backtrace %d\n", x);
        if (x > 0)
                test_backtrace(x-1);
        else
                mon_backtrace(0, 0, 0);
        cprintf("leaving test_backtrace %d\n", x);
}
 #+END_SRC

 Register =%bp= makes stack linked.
 This is a recursion function, let's test this in qemu.
 Firstly, we need to implement more codes...

**** Exercise 11
#+BEGIN_QUOTE
Implement the backtrace function as specified above. 
Use the same format as in the example, since otherwise the grading script will be confused. 
When you think you have it working right, run make grade to see if its output conforms to what our grading script expects, 
and fix it if it doesn't. 
After you have handed in your Lab 1 code, you are welcome to change the output format of the backtrace function any way you like.

If you use read_ebp(), note that GCC may generate "optimized" code that 
calls read_ebp() before mon_backtrace()'s function prologue, 
which results in an incomplete stack trace (the stack frame of the most recent function call is missing). 
While we have tried to disable optimizations that cause this reordering, 
you may want to examine the assembly of mon_backtrace() and make sure the call to read_ebp() is happening after the function prologue.
#+END_QUOTE
#+BEGIN_SRC c
int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
 	// Your code here.                                                           
	uint32_t ebp, eip, args[5];
        cprintf("Stack backtrace:\n");
        for(ebp = read_ebp(); ebp != 0; ebp = *((uint32_t *)ebp)) {
                eip = *((uint32_t *)ebp + 1);
                args[0] = *((uintptr_t *)ebp + 2);
                args[1] = *((uintptr_t *)ebp + 3);
                args[2] = *((uintptr_t *)ebp + 4);
                args[3] = *((uintptr_t *)ebp + 5);
                args[4] = *((uintptr_t *)ebp + 6);
                cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n",
                        ebp, eip, args[0], args[1], args[2], args[3], args[4]);
        }
        return 0;
}
#+END_SRC
#+BEGIN_SRC 
entering test_backtrace 5
entering test_backtrace 4
entering test_backtrace 3
entering test_backtrace 2
entering test_backtrace 1
entering test_backtrace 0
Stack backtrace:
  ebp f010ff18  eip f0100078  args 00000000 00000000 00000000 f010004a f0111308
  ebp f010ff38  eip f01000a1  args 00000000 00000001 f010ff78 f010004a f0111308
  ebp f010ff58  eip f01000a1  args 00000001 00000002 f010ff98 f010004a f0111308
  ebp f010ff78  eip f01000a1  args 00000002 00000003 f010ffb8 f010004a f0111308
  ebp f010ff98  eip f01000a1  args 00000003 00000004 00000000 f010004a f0111308
  ebp f010ffb8  eip f01000a1  args 00000004 00000005 00000000 f010004a f0111308
  ebp f010ffd8  eip f01000f4  args 00000005 00001aac 00000640 00000000 00000000
  ebp f010fff8  eip f010003e  args 00000003 00001003 00002003 00003003 00004003
leaving test_backtrace 0
leaving test_backtrace 1
leaving test_backtrace 2
leaving test_backtrace 3
leaving test_backtrace 4
leaving test_backtrace 5
#+END_SRC
Done!

**** Exercise 12
#+BEGIN_QUOTE
Modify your stack backtrace function to display, for each eip, the function name, source file name, and line number corresponding to that eip.

In debuginfo_eip, where do __STAB_* come from? This question has a long answer; to help you to discover the answer, here are some things you might want to do:

look in the file kern/kernel.ld for __STAB_*
run objdump -h obj/kern/kernel
run objdump -G obj/kern/kernel
run gcc -pipe -nostdinc -O2 -fno-builtin -I. -MD -Wall -Wno-format -DJOS_KERNEL -gstabs -c -S kern/init.c, and look at init.s.
see if the bootloader loads the symbol table in memory as part of loading the kernel binary
Complete the implementation of debuginfo_eip by inserting the call to stab_binsearch to find the line number for an address.

Add a backtrace command to the kernel monitor, and extend your implementation of mon_backtrace to call 
debuginfo_eip and print a line for each stack frame of the form:
#+BEGIN_SRC 
K> backtrace
Stack backtrace:
  ebp f010ff78  eip f01008ae  args 00000001 f010ff8c 00000000 f0110580 00000000
         kern/monitor.c:143: monitor+106
  ebp f010ffd8  eip f0100193  args 00000000 00001aac 00000660 00000000 00000000
         kern/init.c:49: i386_init+59
  ebp f010fff8  eip f010003d  args 00000000 00000000 0000ffff 10cf9a00 0000ffff
         kern/entry.S:70: <unknown>+0
K> 
#+END_SRC
Each line gives the file name and line within that file of the stack frame's eip, 
followed by the name of the function and the offset of the eip from the first instruction of the function 
(e.g., monitor+106 means the return eip is 106 bytes past the beginning of monitor).

Be sure to print the file and function names on a separate line, to avoid confusing the grading script.

Tip: printf format strings provide an easy, albeit obscure, way to print non-null-terminated strings like those in STABS tables. 
printf("%.*s", length, string) prints at most length characters of string. Take a look at the printf man page to find out why this works.

You may find that some functions are missing from the backtrace. 
For example, you will probably see a call to monitor() but not to runcmd(). 
This is because the compiler in-lines some function calls. 
Other optimizations may cause you to see unexpected line numbers. 
If you get rid of the -O2 from GNUMakefile, the backtraces may make more sense (but your kernel will run more slowly).
#+END_QUOTE
Let's finish lab 1!

Tracing address is not enough!
We want the function name:)

#+BEGIN_SRC c
int
mon_backtrace(int argc, char **argv, struct Trapframe *tf)
{
        uint32_t ebp, eip, args[5];
        struct Eipdebuginfo info;
        cprintf("Stack backtrace:\n");
	for(ebp = read_ebp(); ebp != 0; ebp = *((uint32_t *)ebp)) {
                eip = *((uint32_t *)ebp + 1);
                debuginfo_eip(eip, &info);
                args[0] = *((uintptr_t *)ebp + 2);
	        args[1] = *((uintptr_t *)ebp + 3);
                args[2] = *((uintptr_t *)ebp + 4);
	        args[3] = *((uintptr_t *)ebp + 5);
	        args[4] = *((uintptr_t *)ebp + 6);
                cprintf("  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n",
	                ebp, eip, args[0], args[1], args[2], args[3], args[4]);
                cprintf("      %s:%d: %.*s+%d\n", info.eip_file, info.eip_line,
                        info.eip_fn_namelen, info.eip_fn_name, eip - info.eip_fn_addr);
        }
        return 0;
}
#+END_SRC
plumb into =kern/kdebug.c= :
#+BEGIN_SRC c
// Your code here.                                                                                                                                      
stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
if(lline <= rline) {
    info->eip_line = stabs[lline].n_desc;
}
else info->eip_line = -1;
#+END_SRC

Have a test:
#+BEGIN_SRC 
Stack backtrace:
  ebp f010ff18  eip f0100078  args 00000000 00000000 00000000 f010004a f0111308
      kern/init.c:18: test_backtrace+56
  ebp f010ff38  eip f01000a1  args 00000000 00000001 f010ff78 f010004a f0111308
      kern/init.c:16: test_backtrace+97
  ebp f010ff58  eip f01000a1  args 00000001 00000002 f010ff98 f010004a f0111308
      kern/init.c:16: test_backtrace+97
  ebp f010ff78  eip f01000a1  args 00000002 00000003 f010ffb8 f010004a f0111308
      kern/init.c:16: test_backtrace+97
  ebp f010ff98  eip f01000a1  args 00000003 00000004 00000000 f010004a f0111308
      kern/init.c:16: test_backtrace+97
  ebp f010ffb8  eip f01000a1  args 00000004 00000005 00000000 f010004a f0111308
      kern/init.c:16: test_backtrace+97
  ebp f010ffd8  eip f01000f4  args 00000005 00001aac 00000640 00000000 00000000
      kern/init.c:39: i386_init+78
  ebp f010fff8  eip f010003e  args 00000003 00001003 00002003 00003003 00004003
      kern/entry.S:83: <unknown>+0
#+END_SRC

The last thing, add command to qemu repl:
#+BEGIN_SRC c
static struct Command commands[] = {
    { "help", "Display this list of commands", mon_help },
    { "kerninfo", "Display information about the kernel", mon_kerninfo },
    { "backtrace", "Display a listing of function call frames", mon_backtrace}
};
#+END_SRC
Done!

** Epilogue
Have a grade!
#+BEGIN_SRC 
$ make grade
#+END_SRC
#+BEGIN_SRC 
make[1]: Leaving directory '/home/comcx/MIT6.828/lab'
running JOS: (0.5s) 
  printf: OK 
  backtrace count: OK 
  backtrace arguments: OK 
  backtrace symbols: OK 
  backtrace lines: OK 
Score: 50/50
#+END_SRC
Done!

There left some challenges to do,
See u later:)









