#+Title:  Agda language study
#+Author: Comcx

#+SETUPFILE: theme-readtheorg-local.setup


因为 /agda/ 的国内使用者还很少，为了满足我的安利欲，我打算用中文写我的agda学习笔记与过程，希望可以在这个过程中获得新知的快乐。
Agda是一款依赖类型系统为核心的语言，所以支持形式化证明（实际上这也是agda的重要用途）。此外，agda的设计也十分有趣，无论是
混合前中后缀语法还是类Haskell的代码风格，都给予了玩家极大的自由。在agda的世界里，我们可以没有 =Integer= ，没有 =Bool= ,
但是我们却获得了创造一切的木头（没错，类似Minecraft）。在没有agda-stdlib的情况下，我们就需要自力更生，成为欢乐原始人或者，
成为 *创造神。*

我想在这里首先吐槽一番我踩过的安装agda的坑！
1. Ubuntu下的agda-bin和agda-stdlib也许不兼容。
  我尝试了N次在Ubuntu下安装agda，一次也没成功过！我查了很多资料，最终认为也许是内部有不兼容。

2. Arch平台我也安装了N次！Arch一直提示缺少IEEE的库，我重装了那个库还是没有卵用。。。

3. Cabal国内访问速度龟速，几乎无法使用，换了镜像继续爆炸。。。
  清华源安装继续失败，原因不明：(


在绝望中，我下载了 _Agda bundle_ 的windows版本，结果居然成功了，第二次这么想赞美win（第一次是TypeScript）。
于是现在我终于可以开始愉快的学习编程了！


** 对Agda的第一印象

首先，agda终于统一了term, type的区别，大家都愉快的变成了一种东西。因此我们也就几乎不需要类似 =type= 关键词之类的多余的设施。
对于Haskell玩家来说，agda一上来最明显的区别是类型标记的符号从 =::= 变成了 =：= 。
#+BEGIN_SRC agda
foo : Set

#+END_SRC
此处 =Set= 瞩目。如果你使用过haskell的话，那么你一定知道haskell的 =kind= 。kind在haskell里写作 =*= 。在haskell里如果我们需要
特别对类型进行限定，我们要写：
#+BEGIN_SRC haskell
class Functor f :: * -> * where
  ...
#+END_SRC
之类的代码，其实agda这里不仅把 =*= 换成了 =Set= ，而且agda还有不同层次的 _universe_ (用来逃避罗素悖论)。

此外，agda的ADT声明方式统一采用haskell的 *GADT* 格式，这样可以使得agda的类型约束十分强大。

** Re: 从零开始的Agda生活

*** 从零开始的自然数(Nat and Bool)
在agda里，我们一开始是没有自然数的，我们需要使用皮亚诺公理。
#+BEGIN_SRC agda
data Nat : Set where
  zero : Nat
  suc  : Nat -> Nat
#+END_SRC

一切都十分简洁而自然。我们可以在emacs里按 =C-c C-n= 来输入表达式进行测试，比如 =suc (suc zero)= 。

可是我们总不想写一个3都要写成 =suc (suc (suc zero))= ,我们可以把我们定义的自然数映射到普通的十进制算数标记：
#+BEGIN_SRC agda
{-# BUILTIN NATURAL Nat #-}
#+END_SRC
于是我们可以愉快的使用自然数数字了！

简单定义几个基本算术：
#+BEGIN_SRC agda

_+_ : Nat → Nat → Nat
zero + n = n
(succ n) + m = succ (n + m)

_*_ : Nat → Nat → Nat
zero * m = zero
(succ n) * m = m + (n * m)

infixl 60 _*_
infixl 40 _+_

#+END_SRC

注意到这里的中缀函数表达，agda里可以用下画线 =_= 来表示这里需要参数。
最好玩的一个例子是我们可以定义出来和haskell一样的if-then-else。
#+BEGIN_SRC agda
data Bool : Set where
  true  : Bool
  false : Bool

if_then_else_ : Bool -> Bool -> Bool
if true  then x else y = x
if false then x else y = y

infix  5 if_then_else_
#+END_SRC

Cool! 我们有了布尔运算！

*** 从零开始的列表(List)

#+BEGIN_SRC agda
data List (A : Set) : Set where
  []   : List A
  _::_ : A -> List A -> List A
#+END_SRC
可以看到，和haskell的GADT几乎一模一样。

*** 尝试构造我们的常用小函数！

#+BEGIN_SRC agda

id : {A : Set} → A → A
id x = x

map : {A B : Set} → (A → B) → List A → List B
map f [] = []
map f (x :: xs) = f x :: map f xs

foldl : {A B : Set} → (B → A → B) → B → List A → B
foldl f a [] = a
foldl f a (x :: xs) = foldl f (f a x) xs

#+END_SRC

需要说明的是agda有implicit参数功能，需要省略的term直接用大括号{包起来}就可以。
这里的定义和使用几乎和haskell一模一样。

*** 类型即命题，程序即证明

可以试试先证明最简单的加法结合律和交换律。

**** 证明加法结合律
#+BEGIN_SRC agda

+assoc : ∀ (m n p : Nat) → (m + n) + p ≡ m + (n + p)
+assoc zero n p =
  begin
    (zero + n) + p
  ≡<>
    n + p
  ≡<>
    zero + (n + p)
  end

+assoc (suc m) n p = 
  begin
    ((suc m) + n) + p
  ≡<>
    suc (m + n) + p
  ≡<>
    suc ((m + n) + p)
  ≡< cong suc (+assoc m n p) >
    suc (m + (n + p))
  ≡<>
    suc m + (n + p)
  end

#+END_SRC
注意这里 =begin, \==<>, end= 都是agda标准库函数

**** 证明加法交换律
#+BEGIN_SRC agda

+identity : ∀ (m : Nat) → m + 0 ≡ m
+identity 0 = refl
+identity (suc n) =
  begin
    (suc n) + 0
  ≡<>
    suc (n + 0)
  ≡< cong suc (+identity n) >
    suc n
  end


+suc : ∀ (m n : Nat) → m + suc n ≡ suc (m + n)
+suc 0 n = refl
+suc (suc m) n =
  begin
    (suc m) + (suc n)
  ≡<>
    suc (m + suc n)
  ≡< cong suc (+suc m n) >
    suc (suc (m + n))
  ≡<>
    suc (suc m + n)
  end


+comm : ∀ (m n : Nat) → m + n ≡ n + m
+comm m 0 =
  begin
    m + 0
  ≡< +identity m >
    m
  ≡<>
    0 + m
  end
+comm m (suc n) =
  begin
    m + (suc n)
  ≡< +suc m n >
    suc (m + n)
  ≡< cong suc (+comm m n) >
    suc (n + m)
  ≡<>
    suc n + m
  end

#+END_SRC
由于agda简洁干净的语法，几乎不需要任何解释，代码自明。

*** 想找到相等的东西是人类一切思考的源头
相等看似简单，实则很深奥，以至于在范畴论里定义了好几种相等都不太够用，编程更是相等满天飞，重载 ==== 一直是一件很重要的事。
在agda里，相等自然也有好几种，这里我们先看看Propositional equality。

#+BEGIN_SRC agda
data _≡_ {A : Set} (x : A) : A → Set where
  refl : x ≡ x

infix 4 _≡_
#+END_SRC
没错，这种相等的想法很简单，如果是一个东西，那么相等。

**** 相等的三个基本特性

既然有了自反性，那我们的相等肯定也是对称的且是可传递的，我们来试着证明：
#+BEGIN_SRC agda

sym : ∀ {A : Set} {x y : A}
  → x ≡ y
  → y ≡ x
sym refl = refl

trans : ∀ {A : Set} {x y z : A}
  → x ≡ y
  → y ≡ z
  → x ≡ z
trans refl refl = refl

#+END_SRC

**** 相等的函数可替换性
这一点其实我们早已见识过，没错，就是前面用到的 =cong= 函数。
这里我们来自己动手定义：
#+BEGIN_SRC agda

cong : ∀ {A B : Set} (f : A → B) {x y : A}
  → x ≡ y
  → f x ≡ f y
cong f refl = refl

#+END_SRC
利用这一点，我们可以进行等效替换了：
#+BEGIN_SRC agda

subst : ∀ {A : Set} (f : A → Set) {x y : A}
  → x ≡ y
  → f x → f y
subst f refl fx = fx

#+END_SRC

**** 更多证明相等的工具
还记得我们前面用过的 =begin= =\==<>= =end= 函数们吗？了解了相等的基本定义之后，定义它们其实十分简单：
#+BEGIN_SRC agda

infix  1 begin_
infixr 2 _≡<>_ _≡<_>_
infix  3 _end

begin_ : ∀ {A : Set} {x y : A}
  → x ≡ y
  → x ≡ y
begin x≡y = x≡y

_≡<>_ : ∀ {A : Set} (x : A) {y : A}
  → x ≡ y
  → x ≡ y
x ≡<> x≡y = x≡y

_≡<_>_ : ∀ {A : Set} (x : A) {y z : A}
  → x ≡ y
  → y ≡ z
  → x ≡ z
x ≡< x≡y > y≡z = trans x≡y y≡z

_end : ∀ {A : Set} (x : A)
  → x ≡ x
x end = refl

#+END_SRC
Agda真是太好玩了。

*** 万物初始：宇宙的生成
如果我们完全不使用agda-stdlib，我们便不必遵循不必要的命名，我们可以按照逻辑从零开始创造与安排宇宙。
上面一个很不起眼的地方提到过，agda的 =Set= 的类型不是 =Set= （为了逃避罗素悖论）。那么 =Set= 到底是什么呢？
在万物初始，谁也不知道这是啥。我们不如动手自己尝试构造！

为了后续的构造方便，我们在文件第一行添加如下一行OPTION：
#+BEGIN_SRC agda
{-# OPTIONS --without-K --exact-split --safe #-}
#+END_SRC
下面开始我们的创造之旅！

**** 宇宙的次第
为了绕开罗素悖论，我们不能仅仅只有一个宇宙，我们还需要更 /large/ 的宇宙来无限拓展我们创造的世界。
#+BEGIN_SRC agda
data Level : Set where
  lzero : Level
  lsucc : Level -> Level
#+END_SRC
这里的 =Set= 只是一个 =Set 0= 的语法糖。为了规定宇宙的次序，类似于自然数的induction规则，我们构造了类似的结构（但是代数结构不同）。
我们从 =Set 0= 开始我们的创世。

#+BEGIN_SRC agda
open import Agda.Primitive public
 renaming (
            Level to Universe -- We speak of universes rather than of levels.
          ; lzero to 𝓤₀       -- Our first universe is called 𝓤₀
          ; lsuc to _⁺        -- The universe after 𝓤 is 𝓤 ⁺
          ; Setω to 𝓤ω        -- There is a universe 𝓤ω strictly above 𝓤₀, 𝓤₁, ⋯ , 𝓤ₙ, ⋯
          )
 using    (_⊔_)               -- Least upper bound of two universes, e.g. 𝓤₀ ⊔ 𝓤₁ is 𝓤₁

Type = λ ℓ → Set ℓ

_̇   : (𝓤 : Universe) → Type (𝓤 ⁺)

𝓤 ̇  = Type 𝓤

𝓤₁ = 𝓤₀ ⁺
𝓤₂ = 𝓤₁ ⁺
𝓤₃ = 𝓤₂ ⁺

_⁺⁺ : Universe → Universe
𝓤 ⁺⁺ = 𝓤 ⁺ ⁺

universe-of : {𝓤 : Universe} (X : 𝓤 ̇ ) → Universe
universe-of {𝓤} X = 𝓤

infix  1 _̇
#+END_SRC
从这里开始，我们使用 =𝓤 ̇= 来指称实际的宇宙（𝓤只是宇宙的秩序，也就是上面提到的Level）。

**** 初始与终结对象
正如 =Set= 这一词，我们首先创造集合的世界。
集合的世界在范畴论中有两个基本对象（类型），即初始元素 =𝟙= 和终结元素 =𝟘= 。
#+BEGIN_SRC agda

variable
 𝓤 𝓥 𝓦 𝓣 : Universe

data 𝟙 : 𝓤₀ ̇  where
 ⋆ : 𝟙

data 𝟘 : 𝓤₀ ̇ where
#+END_SRC
这里 =𝟘= 就是空集，𝟙 就是仅有一个元素的 /singleton/ 。
来定义创造联系的函数，有了世界的初始和终结，我们可以正式动手构造与刻画这个世界了。
#+BEGIN_SRC agda

𝟙-induction : (A : 𝟙 → 𝓤 ̇) → A ⋆ → (x : 𝟙) → A x
𝟙-induction A a ⋆ = a

𝟙-recursion : (B : 𝓤 ̇) → B → 𝟙 → B
𝟙-recursion B = 𝟙-induction (λ _ → B)


!𝟙 : {X : 𝓤 ̇} → X → 𝟙
!𝟙 x = ⋆



𝟘-induction : (A : 𝟘 → 𝓤 ̇) → (x : 𝟘) → A x
𝟘-induction A ()

𝟘-recursion : (B : 𝓤 ̇) → 𝟘 → B
𝟘-recursion B = 𝟘-induction (λ _ → B)

!𝟘 : (B : 𝓤 ̇) → 𝟘 → B
!𝟘 = 𝟘-recursion
#+END_SRC
我们还可以用函数来判断一个集合是否为空（False）：
#+BEGIN_SRC agda

is-empty : 𝓤 ̇ → 𝓤 ̇
is-empty X = X → 𝟘

¬ : 𝓤 ̇ → 𝓤 ̇
¬ = is-empty
#+END_SRC
在这里，空 与 假 一语双关。  

**** 自然数卷土重来
有了上面Level的预热，自然数不请自来：
#+BEGIN_SRC agda

data ℕ : 𝓤₀ ̇ where
  zero : ℕ
  succ : ℕ → ℕ

{-# BUILTIN NATURAL ℕ #-}
#+END_SRC
有趣的是，我们可以使用自然数来进行愉快地induction了！
#+BEGIN_SRC agda

ℕ-induction : (A : ℕ → 𝓤 ̇)
            → A 0
            → ((n : ℕ) → A n → A (succ n))
            -------------------------------
            → (n : ℕ) → A n
ℕ-induction A a₀ f = h where
  h : (n : ℕ) → A n
  h 0        = a₀
  h (succ n) = f n (h n)
#+END_SRC
这里，注释的--长线和推理式的横线达成了完美的统一。

这里使用了依赖类型的induction函数类型写法，如果我们退回到类型不能依赖于值的世界中，那么
我们便得到了新（限制更强）的函数：
#+BEGIN_SRC agda

ℕ-recursion : (X : 𝓤 ̇)
            → X
            → (ℕ → X → X)
            → ℕ → X
ℕ-recursion X = ℕ-induction (λ _ → X)
#+END_SRC
写完这个函数，我对着类型越看越觉得熟悉，突然记忆一闪（“我想起来了！[某中二台词]”），这不就是函数 =foldr= 吗！
这东西展开就是： =f n (f (n-1) (f (n-2) .. (f 0 a)..))=

如果直接把中间的每个元素忽略掉，进行 =n= 次迭代，我们又得到了：
#+BEGIN_SRC agda

ℕ-iteration : (X : 𝓤 ̇)
            → X
            → (X → X)
            → ℕ → X
ℕ-iteration X x f = ℕ-recursion X x (λ _ x → f x)
#+END_SRC
展开就是 =f (f (f (.. (f a) ..)))= (迭代n次)。

好了，有了这些工具，基本的算术运算已经跃然于眼前了：
#+BEGIN_SRC agda

module Arithmetic where

  _+_ _×_ : ℕ → ℕ → ℕ

  x + 0 = x
  x + succ y = succ (x + y)

  x × 0 = 0
  x × succ y = x + x × y

  infixl 20 _+_
  infixl 21 _×_
#+END_SRC
我们还可以利用上面定义的iteration函数来定义arithmetic：
#+BEGIN_SRC agda

module Arithmetic' where

  _+_ _×_ : ℕ → ℕ → ℕ

  x + y = h y where
    h : ℕ → ℕ
    h = ℕ-iteration ℕ x succ

  x × y = h y where
    h : ℕ → ℕ
    h = ℕ-iteration ℕ 0 (x +_)

  infixl 20 _+_
  infixl 21 _×_
#+END_SRC
这里 =(x +_)= 的写法居然让我莫名想起了Scala（逃

*** 万物初始：元素的组合
Recap! 我们有了初始宇宙 =𝓤₀= 初始元素 =𝟘= 和终结元素 =𝟙= ，我们有了自然数。

下面我们开始思考，还有什么是可以创造的，或者我们究竟想要创造什么？
既然我们已经有了不止一个元素，那么为什么我们不能把她们组合在一起呢？
如果要组合，组合的方式又是什么呢？

**** 我想把一个东西看成两种东西：X or Y
熟悉Haskell的同学肯定对类型 =Either= 十分熟悉，这种构造方法在很多编程语言里支持还很不完善
（没错，我就是要黑只有struct的语言，写一个解释器要弄一堆tag，应该学习Rust的enum）。
在Agda里，我们有了更加强大的能力，我们想要指代的两个类型不仅可以映射到一个新构造的类型里，
还可以让他们相互依赖。但这里我们先来看最简单的 =binary sum type= 。

#+BEGIN_SRC agda

data _+_ {𝓤 𝓥} (X : 𝓤 ̇) (Y : 𝓥 ̇) : 𝓤 ⊔ 𝓥 ̇ where
  inl : X → X + Y
  inr : Y → X + Y
#+END_SRC
如果学过范畴论的同学看到这个一定会倍感亲切，这和数学上的定义如出一辙。

按照我们的惯例，进行induction和recursion：
#+BEGIN_SRC agda

+-induction : {X : 𝓤 ̇} {Y : 𝓥 ̇} (A : X + Y → 𝓦 ̇)
            → ((x : X) → A (inl x))
            → ((y : Y) → A (inr y))
            -----------------------
            → (z : X + Y) → A z
+-induction A f g (inl x) = f x
+-induction A f g (inr y) = g y

+-recursion : {X : 𝓤 ̇} {Y : 𝓥 ̇} {A : 𝓦 ̇}
            → (X → A)
            → (Y → A)
            → X + Y → A
+-recursion {𝓤} {𝓥} {𝓦} {X} {Y} {A} = +-induction (λ _ → A)
#+END_SRC
代码已经几乎不言自明。
[这里打算后期补图]

现在我们可以组合新的元素（类型）了:
#+BEGIN_SRC agda

𝟚 : 𝓤₀ ̇
𝟚 = 𝟙 + 𝟙
#+END_SRC
这里介绍一个agda的新功能，即给一个pattern起一个新名字，我们可以给一个pattern起不同的别名：
#+BEGIN_SRC agda

pattern ₀ = inl ⋆
pattern ₁ = inr ⋆
#+END_SRC
继续induction:
#+BEGIN_SRC agda

𝟚-induction : (A : 𝟚 → 𝓤 ̇)
            → A ₀
            → A ₁
            ----------------
            → (n : 𝟚) → A n
𝟚-induction A a₀ a₁ ₀ = a₀
𝟚-induction A a₀ a₁ ₁ = a₁
#+END_SRC
So far so good. 除了 =_+_= 的组合方式，我们还可以有 =Σ= 。

**** 我想把两个东西看成一种东西：X and Y
我们首先有我们的dependent sum!
#+BEGIN_SRC agda

record Σ {𝓤 𝓥} {X : 𝓤 ̇} (Y : X → 𝓥 ̇) : 𝓤 ⊔ 𝓥 ̇ where
  constructor _,_
  field
    x : X
    y : Y x

pr₁ : {X : 𝓤 ̇} {Y : X → 𝓥 ̇} → Σ Y → X
pr₁ (x , y) = x

pr₂ : {X : 𝓤 ̇} {Y : X → 𝓥 ̇} → (z : Σ Y) → Y (pr₁ z)
pr₂ (x , y) = y
#+END_SRC

- *NOTE* 

  在我写下今天的内容的时候（2020.03.07），agda（ver 2.6.0.1）还不支持在类型声明中的 =pattern matching= 。
  在agda即将到来的2.6.1.0中会支持这一十分有用的功能。
  具体见：[[https://stackoverflow.com/questions/60557445/agda-pattern-matching-inside-type-declarations][Agda pattern matching inside ...]]






