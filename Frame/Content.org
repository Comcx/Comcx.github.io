#+Title:  Contents
#+AUTHOR: Comcx


#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../Note/org-themes/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../Note/org-themes/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script type="text/javascript" src="../Note/org-themes/styles/lib/js/jquery.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="../Note/org-themes/styles/lib/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="../Note/org-themes/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="../Note/org-themes/styles/readtheorg/js/readtheorg.js"></script>
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>
#+HTML_HEAD: <style> p{max-width:800px;}</style>

#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="images/digimon-icon.png" />


** Articles
*** [[../Note/FromRecursionToGreedy.html][From Recursion to Greedy algorithms: a functional perspective]]
    *2020.01.24*\\
    There's an important leanring and developing chain of traditional algorithms:
    =Divide and Conquer(recursion) ---> Dynamic Programming(mermorization) --> Greedy= 
 
*** [[../Note/IOMonadInJavaScript.html][IO Monad in JavaScript!]]
    *2020.01.27*\\
    Monad >>= \m => interesting, right?
         
*** [[../Note/SortingAlgorithmsRevisited.html][Sorting algorithms revisited]]
    *2020.01.29*\\
    We're going to revisite some main-stream sorting algorithms and
    try to implement them in a more efficient way.

    To make things simple, we choose _Haskell_ to describe basic recursions and
    ideas, then we directly translate haskell codes into _Scala_ since Scala serves
    a great role between purely functional way and more traditional ways.

    Finally, we translate Scala codes into _C++_ (some even C:).
	 
*** [[../Note/LearningFPByParserCombinators.html][Learning Functional Programming by Parser Combinators!]]
    *2020.01.30*\\
	      
*** [[../Note/HaskellShowInstanceOverlappingProblem.html][Haskell Show Instance Overlapping Problem]]
    *2020.02.02*\\
    Same question encountered when I designed /Nona/...
		  
*** [[../Note/NumberOfProperFractionsWithDenominator.html][Codewars | Number of Proper Fractions with Denominator d]]
    *2020.02.23*\\
    (Euler's totient function :-)

*** [[../Note/PrimeFactorization.html][Prime Factorization]]
    *2020.02.24*\\
    Prime numbers are interesting

*** [[../Note/Tailrec.html][Tail recursion optimization translation]]
    *2020.02.27*\\
    Many algorithms can be expressed concisely and elegantly in functional languages with recursions.
    However, not all languages support automatic optimizations respect to functional algorithms and,
    some languages(such as /Scala/), although support basic =@tailrec= optimizations by code transformation,
    they still can not do some agressive tailrec optimizations such as =CPS tailrec=.

*** [[../Note/AgdaStudy.html][从零开始的Agda生活]]
    *2020.03.01*\\
    因为 /agda/ 的国内使用者还很少，为了满足我的安利欲，我打算用中文写我的agda学习笔记与过程，希望可以在这个过程中获得新知的快乐。
    Agda是一款依赖类型系统为核心的语言，所以支持形式化证明（实际上这也是agda的重要用途）。此外，agda的设计也十分有趣，无论是
    混合前中后缀语法还是类Haskell的代码风格，都给予了玩家极大的自由。在agda的世界里，我们可以没有 =Integer= ，没有 =Bool= ,
    但是我们却获得了创造一切的木头（没错，类似Minecraft）。在没有agda-stdlib的情况下，我们就需要自力更生，成为欢乐原始人或者，
    成为 *创造神。*

*** [[../Note/MIT6.828.lab1.html][MIT6.828 Lab 1]]
    To design a good OS is to create a great programming language.





